(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{159:function(e,t,n){"use strict";var a=n(6),o=n.n(a),i=n(24),c=n.n(i),r=n(7),l=n.n(r),s=n(160),b=n.n(s),p=function(e){var t=e.children,n=e.href,a=e.className,o=l()(t,2),i=o[0],c=o[1],r=n?React.createElement("a",{href:n,target:"_blank"},i):i;return React.createElement("figure",{className:"".concat(a," ").concat(b.a.figure)},r,React.createElement("figcaption",null,React.createElement("span",{className:b.a.arrow},"▲"),React.createElement("span",null,c)))};p.Video=function(e){var t=e.children,n=e.href,a=e.src,i=c()(e,["children","href","src"]);return React.createElement(p,o()({href:n||a},i),React.createElement("video",{muted:!0,autoPlay:!0,playsInline:!0,loop:!0},React.createElement("source",{src:a,type:"video/mp4"})),t)},p.Image=function(e){var t=e.children,n=e.href,a=e.src,i=e.alt,r=c()(e,["children","href","src","alt"]);return React.createElement(p,o()({href:n||a},r),React.createElement("img",{src:a,alt:i}),t)},t.a=p},160:function(e,t,n){e.exports={figure:"styles-figure_23Vi",arrow:"styles-arrow_2C7-"}},72:function(e,t,n){"use strict";n.r(t),n.d(t,"r",(function(){return a})),n.d(t,"r2",(function(){return o})),n.d(t,"title",(function(){return O})),n.d(t,"path",(function(){return j})),n.d(t,"type",(function(){return g})),n.d(t,"description",(function(){return z})),n.d(t,"keywords",(function(){return y})),n.d(t,"image",(function(){return w})),n.d(t,"video",(function(){return N})),n.d(t,"date",(function(){return v})),n.d(t,"default",(function(){return T}));var a,o,i=n(6),c=n.n(i),r=n(24),l=n.n(r),s=(n(0),n(25)),b=n(161),p=n(162),m=n(163),u=n(67),d=n(164),h=n(165),f=n(159),O="How Bash completion works",j="/blog/how-bash-completion-works",g="article",z="Ever wondered how Bash completion works? In this first article on the topic, we’ll look at how it works under the hood.",y="Chris Patuzzo,Bash,Ruby,Chef,completion,auto-completion,complete,auto-complete,how it works,behaviour,rbenv,nodenv,FizzBuzz",w={path:"/images/fizzbuzz-completion.gif",width:800,height:630,bytes:245983,type:"image/gif"},N={path:"/videos/fizzbuzz-completion.mp4",width:820,height:646,bytes:129214,type:"video/mp4"},v="2019-10-06T12:00Z",C={r:a,title:O};function T(e){var t=e.components,n=l()(e,["components"]);return Object(s.b)("wrapper",c()({},C,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)(m.a,c()({title:O,path:j,type:g,description:z,keywords:y,image:w,video:N},{mdxType:"MetaTags"})),Object(s.b)(u.a,{previous:b.happy100th,next:b.addingBashCompletion,mdxType:"NavBar"}),Object(s.b)("title",null,O),Object(s.b)("h1",null,O),Object(s.b)("time",{dateTime:v},"Published ",Object(p.a)(v)," by "," ",Object(s.b)("a",{href:"https://twitter.com/chrispatuzzo"},"Chris Patuzzo"),Object(s.b)(d.a,{mdxType:"FeedIcon"})),Object(s.b)("span",{ref:a=createRef()}),Object(s.b)("div",{className:"note"},"This is the first of two parts on Bash completion. Part two is ",Object(s.b)("a",{href:"/blog/adding-bash-completion"},"here"),"."),Object(s.b)(f.a.Video,{src:"/videos/zz-completion.mp4",className:"more_space"},"Bash completion for ",Object(s.b)("a",{href:"https://github.com/tuzz/zz"},"‘The tuzz automation tool’")),Object(s.b)(h.a,{target:a,moveDown:282,mdxType:"Aside"},"I think ‘completion’ and ‘auto-completion’ mean the same in this context. I’ll use the former for brevity."),Object(s.b)("p",null,"Over the years I’ve developed a command-line tool I use for routine tasks such\nas provisioning my machine, generating project templates and managing secrets.\nThe tool is written in Ruby and I invoke it with the ",Object(s.b)("inlineCode",{parentName:"p"},"zz")," command."),Object(s.b)("p",null,"Most of ",Object(s.b)("span",{ref:a=createRef()},"what")," it does is fairly\nstraightforward. The clever bits are usually delegated to something else. For\nexample, ",Object(s.b)("inlineCode",{parentName:"p"},"zz provision")," is really just a wrapper that installs and runs Chef,\nwhile passing various options to it."),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,"It uses ",Object(s.b)("a",c()({parentName:"p"},{href:"https://docs.chef.io/chef_solo.html"}),"chef-solo")," which is a slimmed down\nversion of Chef that runs on a single node. No server needed.")),Object(s.b)("p",null,"Recently, I added Bash completion to my tool. I’ve wanted this for a while, but\ndecided to add it now in preparation for ",Object(s.b)("span",{ref:a=createRef()},"secrets\nmanagement.")," For example, I want to be able to type ",Object(s.b)("inlineCode",{parentName:"p"},"zz secret --read\namaz<TAB><TAB> ")," and have it complete to ",Object(s.b)("inlineCode",{parentName:"p"},"zz secret --read amazon/"),".  Perhaps\nhitting ",Object(s.b)("inlineCode",{parentName:"p"},"<TAB>")," again will list all secrets under this path, e.g. username,\npassword, access_key, etc."),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,"I haven’t actually implemented secrets management yet. Currently, I’m running\n",Object(s.b)("inlineCode",{parentName:"p"},"gpg --encrypt")," and ",Object(s.b)("inlineCode",{parentName:"p"},"--decrypt")," a lot so hopefully I’ll find time to add this\nfeature soon.")),Object(s.b)("h2",null,"The mechanics"),Object(s.b)("p",null,"In ",Object(s.b)("span",{ref:a=createRef()},"Bash"),", completion is handled through the ",Object(s.b)("inlineCode",{parentName:"p"},"complete")," ‘built-in’:"),Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"$ type complete\ncomplete is a shell builtin\n")),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,Object(s.b)("a",c()({parentName:"p"},{href:"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html"}),"Builtins"),"\nare commands ‘built into’ the shell. They provide basic operations like ",Object(s.b)("inlineCode",{parentName:"p"},"echo"),",\n",Object(s.b)("inlineCode",{parentName:"p"},"help")," and ",Object(s.b)("inlineCode",{parentName:"p"},"type"),":"),Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"$ type type\ntype is a shell builtin\n"))),Object(s.b)("p",null,"This command allows you to register a method of completion for a command. For\nexample, an ",Object(s.b)("inlineCode",{parentName:"p"},"rgb")," command might register its known colors:"),Object(s.b)(f.a,{mdxType:"Figure"},Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),'$ complete -W "red green blue yellow purple pink orange" color\n')),Object(s.b)("p",null,"Setting a hardcoded list of completions")),Object(s.b)("p",null,"You could then complete color names:"),Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"$ color <TAB><TAB>\nblue    green   orange  pink    purple  red     yellow\n\n$ color p<TAB><TAB>\npink    purple\n\n$ color pi<TAB> # completes to pink\n")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"-W")," switch configures a static list of completions that are printed in\nalphabetical order. It’s just one of the many methods of ",Object(s.b)("span",{ref:a=createRef()},"completion.")),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,"It’s also the simplest.")),Object(s.b)("h3",null,"Listing completion methods"),Object(s.b)("p",null,"To see which commands have completion methods, run ",Object(s.b)("inlineCode",{parentName:"p"},"complete")," without arguments:"),Object(s.b)("span",{ref:a=createRef()}),Object(s.b)(f.a,{mdxType:"Figure"},Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"$ complete\ncomplete -W 'red green blue yellow purple pink orange' color\ncomplete -F _nodenv nodenv\ncomplete -F _rbenv rbenv\n")),Object(s.b)("p",null,"Listing all registered completion methods")),Object(s.b)(h.a,{target:a,moveDown:12,mdxType:"Aside"},Object(s.b)("p",null,"If you try to complete commands without registered methods, Bash uses its default behaviour and lists files in the current directory.")),Object(s.b)("p",null,"Here you can see ",Object(s.b)("inlineCode",{parentName:"p"},"nodenv")," and ",Object(s.b)("inlineCode",{parentName:"p"},"rbenv")," support completion. They use the ",Object(s.b)("inlineCode",{parentName:"p"},"-F"),"\nswitch to specify functions to handle their completion, ",Object(s.b)("span",{ref:a=createRef()},"namely")," ",Object(s.b)("inlineCode",{parentName:"p"},"_nodenv")," and ",Object(s.b)("inlineCode",{parentName:"p"},"_rbenv"),". When you complete one of\nthese commands, their output is context-aware:"),Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"$ rbenv install 2.5<TAB><TAB>\n2.5.0          2.5.0-rc1      2.5.1          2.5.2          2.5.3\n")),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,"It seems to be a convention to name these Bash functions ",Object(s.b)("inlineCode",{parentName:"p"},"_<command>"),".")),Object(s.b)("p",null,"That’s helpful! ",Object(s.b)("inlineCode",{parentName:"p"},"rbenv")," has kindly listed which Ruby ",Object(s.b)("strong",{parentName:"p"},"2.5.x")," versions are available\nto install. We could find this out from ",Object(s.b)("inlineCode",{parentName:"p"},"rbenv install --list")," but that’s\ninefficient because we’d have to clear our current command then re-type it."),Object(s.b)("h2",null,"How completion ",Object(s.b)("em",{parentName:"h2"},"functions")," work"),Object(s.b)("p",null,"When a function is registered as the method of completion with the ",Object(s.b)("inlineCode",{parentName:"p"},"-F")," switch,\nit must comply with an ‘interface’ of sorts. When the function is called, Bash\nsets some environment variables to be used by the completion function."),Object(s.b)("p",null,"They ",Object(s.b)("span",{ref:a=createRef()},"tell")," it the contents of the\ncommand-line, the cursor position, etc. For example, ",Object(s.b)("inlineCode",{parentName:"p"},"$COMP_LINE")," contains the\nfull line that was typed, ",Object(s.b)("inlineCode",{parentName:"p"},"$COMP_WORDS")," is that same line broken into an array\nof words and ",Object(s.b)("inlineCode",{parentName:"p"},"$COMP_POINT")," is the cursor’s index position."),Object(s.b)("p",null,"In return, the completion function should set ",Object(s.b)("inlineCode",{parentName:"p"},"$COMPREPLY")," to specify which\ncompletions to print for the command."),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,"Using environment variables as a means of passing information back and forth\nseems kind of awkward. Bash ",Object(s.b)("em",{parentName:"p"},"is")," pretty old, though.")),Object(s.b)("h3",null,"An example"),Object(s.b)("p",null,"Everybody loves FizzBuzz, right? Let’s demonstrate Bash completion with a custom\nfunction that ",Object(s.b)("em",{parentName:"p"},"magically")," completes the next term in the sequence:"),Object(s.b)("span",{ref:a=createRef()}),Object(s.b)(f.a,{mdxType:"Figure"},Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"function _fizzbuzz () {\n  length=${#COMP_WORDS[@]}\n  number=$((length - 1))\n\n  if   ! ((number % 15)); then COMPREPLY=(fizzbuzz)\n  elif ! ((number % 3));  then COMPREPLY=(fizz)\n  elif ! ((number % 5));  then COMPREPLY=(buzz)\n  else                         COMPREPLY=($number)\n  fi\n}\n\ncomplete -F _fizzbuzz fizzbuzz\n")),Object(s.b)("p",null,"Setting a Bash function to complete ",Object(s.b)("inlineCode",{parentName:"p"},"fizzbuzz"))),Object(s.b)(h.a,{target:a,moveDown:25,mdxType:"Aside"},Object(s.b)("p",null,"In Bash, you can access elements in an array, or get its length like this:"),Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"first=${SOME_ARRAY[0]}\nsecond=${SOME_ARRAY[1]}\n\nlength=${#SOME_ARRAY[@]}\n"))),Object(s.b)("p",null,"Our ",Object(s.b)("span",{ref:a=createRef()},"command")," is called ",Object(s.b)("inlineCode",{parentName:"p"},"fizzbuzz")," so we name\nour completion function ",Object(s.b)("inlineCode",{parentName:"p"},"_fizzbuzz"),", as per the convention. We first set the\n",Object(s.b)("inlineCode",{parentName:"p"},"length")," variable to the number of words on the command-line and ",Object(s.b)("inlineCode",{parentName:"p"},"number")," to\none less, since ‘",Object(s.b)("inlineCode",{parentName:"p"},"fizzbuzz"),"’ itself counts as a word."),Object(s.b)("p",null,"We’ve probably all seen FizzBuzz before so let’s skip the modulo logic. The\nimportant part is to set ",Object(s.b)("inlineCode",{parentName:"p"},"$COMPREPLY")," - in this case, to an array of the next\nterm in the sequence."),Object(s.b)("p",null,"Now, if we type ",Object(s.b)("inlineCode",{parentName:"p"},"fizzbuzz <TAB><TAB>"),", Bash completion kicks in and as if by\n",Object(s.b)("em",{parentName:"p"},"magic")," the next term is appended to the current command-line.  Our ",Object(s.b)("inlineCode",{parentName:"p"},"fizzbuzz"),"\ncommand doesn’t actually exist but that doesn’t seem to matter!"),Object(s.b)(h.a,{target:a,mdxType:"Aside"},Object(s.b)("p",null,"I do wonder if this could be used as an attack vector:"),Object(s.b)("pre",null,Object(s.b)("code",c()({parentName:"pre"},{className:"language-bash"}),"function _ls () {\n  # do something nasty\n}\n\ncomplete -F _ls ls\n")),Object(s.b)("p",null,"Of course, we’d need permissions to register completion functions which we won’t\nhave so it’s probably fine?")),Object(s.b)("span",{ref:a=createRef()}),Object(s.b)("span",{ref:o=createRef()}),Object(s.b)(f.a.Video,{src:"/videos/fizzbuzz-completion.mp4",className:"more_space"},"Using Bash completion to generate the FizzBuzz sequence"),Object(s.b)(h.a,{target:a,moveDown:90,mdxType:"Aside"},Object(s.b)("p",null,"If the completion function returns a single option, Bash immediately completes\nit without prompting us."),Object(s.b)("p",null,"That means we can hold down ",Object(s.b)("inlineCode",{parentName:"p"},"<TAB>")," to continuously complete the FizzBuzz\nsequence. Hooray!")),Object(s.b)(h.a,{target:o,moveDown:320,mdxType:"Aside"},Object(s.b)("p",null,"Surely this is the best way to implement FizzBuzz in a coding interview? Or\nmaybe ",Object(s.b)("a",c()({parentName:"p"},{href:"https://github.com/tuzz/fizzquinebuzz"}),"this"),"?")),Object(s.b)("p",null,"As you can see, there’s plenty of fun to be had! In\n",Object(s.b)("a",c()({parentName:"p"},{href:"/blog/adding-bash-completion"}),"part two")," we’ll implement Bash completion for my\nautomation tool and see how it works in practice."),Object(s.b)(u.a,{previous:b.happy100th,next:b.addingBashCompletion,mdxType:"NavBar"}))}T.isMDXComponent=!0}}]);